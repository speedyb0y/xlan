#!/bin/dash




#O ADDR /LINK SCOPE INTERFERE NAS VPNS???

#ELENAO PODE CONSIDERAR O MESMO ENDERECO A MESMA COISA :S






exec > /tmp/internet-log 2>&1

set -x
set -u
set -v

echo 2999 > /proc/sys/vm/dirty_writeback_centisecs
echo 4500 > /proc/sys/vm/dirty_expire_centisecs

chown -R speedyb0y:speedyb0y /dev/input/

######################################################
######################################################

INTERFACE_RTL25_1=88:c9:b3:b0:f1:eb
INTERFACE_RTL25_2=88:c9:b3:b0:f1:ea
INTERFACE_RTL25_3=88:c9:b3:b0:f1:e9
INTERFACE_RTL25_4=88:c9:b3:b0:f1:e8

INTERFACE_RTL1=e8:de:27:a6:d2:3a

INTERFACE_RTL2_1=bc:5f:f4:f9:e6:66 # QUAL É QUAL EU NÃO SEI
INTERFACE_RTL2_2=bc:5f:f4:f9:e6:67

INTERFACE_HUANANZHI_F8=0a:e0:af:b7:06:e6 # A PLACA COM ERRO NOS SLOTS 2

INTERFACE_ASROCK=d0:50:99:ae:de:92

############

LO=lo
LO_4=127.0.0.0/8
LO_6=::1/128

LAN_0=lan-0
LAN_1=lan-1
LAN_W=lan-w
LAN_X=lan-x

LAN_MTU_0=9186
LAN_MTU_1=9186
LAN_MTU_W=1500
LAN_MTU_X=9186

LAN_4_PREFIX=192.168.0.
LAN_6_PREFIX=fc00:2562::

LAN_4_NETWORK=${LAN_4_PREFIX}0
LAN_6_NETWORK=${LAN_6_PREFIX} # SEM O ZERO

LAN_4_NETMASK=24
LAN_4_NETMASK_0=32
LAN_4_NETMASK_W=25
LAN_4_NETMASK_X=25

LAN_6_NETMASK=64
LAN_6_NETMASK_0=128
LAN_6_NETMASK_W=120
LAN_6_NETMASK_X=120

LAN_4_NET=$LAN_4_NETWORK/$LAN_4_NETMASK
LAN_4_NET_0=$LAN_4_NETWORK/$LAN_4_NETMASK_0
LAN_4_NET_W=$LAN_4_NETWORK/$LAN_4_NETMASK_W
LAN_4_NET_X=$LAN_4_NETWORK/$LAN_4_NETMASK_X

LAN_6_NET=$LAN_6_NETWORK/$LAN_6_NETMASK
LAN_6_NET_0=$LAN_6_NETWORK/$LAN_6_NETMASK_0
LAN_6_NET_W=$LAN_6_NETWORK/$LAN_6_NETMASK_W
LAN_6_NET_X=$LAN_6_NETWORK/$LAN_6_NETMASK_X

LAN_4_BROADCAST=${LAN_4_PREFIX}255
LAN_4_BROADCAST_0=LAN_4_BROADCAST_0
LAN_4_BROADCAST_W=${LAN_4_PREFIX}255
LAN_4_BROADCAST_X=${LAN_4_PREFIX}127

LAN_6_BROADCAST=LAN_6_BROADCAST
LAN_6_BROADCAST_0=LAN_6_BROADCAST_0
LAN_6_BROADCAST_W=LAN_6_BROADCAST_W
LAN_6_BROADCAST_X=LAN_6_BROADCAST_X

LAN_4_GW=${LAN_4_PREFIX}1
LAN_6_GW=${LAN_6_PREFIX}1
LAN_4_SWITCH=${LAN_4_PREFIX}5
LAN_6_SWITCH=${LAN_6_PREFIX}5
LAN_4_WIFI=${LAN_4_PREFIX}10
LAN_6_WIFI=${LAN_6_PREFIX}10
LAN_4_SPEEDYB0Y=${LAN_4_PREFIX}20
LAN_6_SPEEDYB0Y=${LAN_6_PREFIX}20
LAN_4_PC2=${LAN_4_PREFIX}30
LAN_6_PC2=${LAN_6_PREFIX}30
LAN_4_XTRADER=${LAN_4_PREFIX}40
LAN_6_XTRADER=${LAN_6_PREFIX}40
LAN_4_XQUOTES=${LAN_4_PREFIX}50
LAN_6_XQUOTES=${LAN_6_PREFIX}50

# ETHERNET
LAN_ITFC_SWITCH=50:d4:f7:48:c2:ee
LAN_ITFC_GW_0=${INTERFACE_RTL25_1}
LAN_ITFC_GW_1=${INTERFACE_RTL25_2}
LAN_ITFC_GW_XTRADER=${INTERFACE_HUANANZHI_F8}
LAN_ITFC_WIFI=LAN_ITFC_WIFI
LAN_ITFC_SPEEDYB0Y_0=${INTERFACE_RTL2_1}
LAN_ITFC_SPEEDYB0Y_1=${INTERFACE_RTL2_2}
LAN_ITFC_SPEEDYB0Y_W=${INTERFACE_ASROCK}

LAN_4_IP=$LAN_4_SPEEDYB0Y
LAN_6_IP=$LAN_6_SPEEDYB0Y

itfc_rename () {

    for ITFC in $(cd /proc/sys/net/ipv4/conf && echo eth* enp*s*) ; do
        if ip link show dev ${ITFC} | grep -q -i ${2} ; then
            ip link set dev ${ITFC} name ${1}
            break
        fi
    done
}

itfc_rename $LAN_0 $LAN_ITFC_SPEEDYB0Y_0
itfc_rename $LAN_1 $LAN_ITFC_SPEEDYB0Y_1
itfc_rename $LAN_W $LAN_ITFC_SPEEDYB0Y_W

insmod /xlan.ko

sleep 1

ip link set dev $LAN_0 mtu $LAN_MTU_X
ip link set dev $LAN_1 mtu $LAN_MTU_X
ip link set dev $LAN_W mtu $LAN_MTU_W
ip link set dev $LAN_X mtu $LAN_MTU_X

ip link set dev $LAN_0 txqueuelen 65536
ip link set dev $LAN_1 txqueuelen 65536
ip link set dev $LAN_W txqueuelen 65536

for ITFC in $LAN_0 $LAN_1 $LAN_W ; do

    : ethtool --offload $ITFC rx on
    : ethtool --offload $ITFC tx on
    : ethtool --offload $ITFC tx-checksum-ip-generic on
    : ethtool --offload $ITFC tx-checksum-ipv4 on
    : ethtool --offload $ITFC tx-checksum-ipv6 on
    : ethtool --offload $ITFC rx-vlan-offload off
    : ethtool --offload $ITFC tx-vlan-offload off
    : ethtool --offload $ITFC generic-segmentation-offload off
    : ethtool --offload $ITFC generic-receive-offload off
    : ethtool --offload $ITFC tcp-segmentation-offload off
    : ethtool --offload $ITFC tx-tcp-segmentation off
    : ethtool --offload $ITFC tx-tcp6-segmentation off

    ethtool --pause $ITFC autoneg off
    ethtool --pause $ITFC rx off
    ethtool --pause $ITFC tx off

    : ethtool --coalesce $ITFC rx-usecs 2000
    : ethtool --coalesce $ITFC tx-usecs 2000

done

echo 1200 65535 > /proc/sys/net/ipv4/ip_local_port_range
echo scalable > /proc/sys/net/ipv4/tcp_congestion_control

echo 120 > /proc/sys/net/ipv4/neigh/default/gc_interval
echo 120 > /proc/sys/net/ipv6/neigh/default/gc_interval

echo 60 > /proc/sys/net/ipv4/route/gc_interval
echo 60 > /proc/sys/net/ipv6/route/gc_interval

echo 65536 > /proc/sys/net/core/netdev_budget
echo 900000 > /proc/sys/net/core/netdev_budget_usecs
echo 65536 > /proc/sys/net/core/netdev_max_backlog
echo 65536 > /proc/sys/net/core/dev_weight
echo 2 > /proc/sys/net/core/dev_weight_tx_bias
echo 2 > /proc/sys/net/core/dev_weight_rx_bias

#echo 1000 > /proc/sys/net/ipv4/tcp_max_reordering
#echo 500 > /proc/sys/net/ipv4/tcp_reordering

for ITFC in default all $LAN_0 $LAN_1 $LAN_W ; do

    echo 1 > /proc/sys/net/ipv4/conf/$ITFC/arp_announce
    echo 1 > /proc/sys/net/ipv4/conf/$ITFC/arp_ignore # REPLY ONLY IF THE TARGET IP ADDRESS IS LOCAL ADDRESS CONFIGURED ON THE INCOMING INTERFACE TODO: O MESMO COM O IPV6?
    echo 1 > /proc/sys/net/ipv4/conf/$ITFC/arp_notify
    echo 0 > /proc/sys/net/ipv4/conf/$ITFC/arp_accept # DON'T CREATE NEW ENTRIES IN THE ARP TABLE
    echo 1 > /proc/sys/net/ipv4/conf/$ITFC/arp_filter
   #echo 1 > /proc/sys/net/ipv4/conf/$ITFC/drop_gratuitous_arp
    echo 0 > /proc/sys/net/ipv6/conf/$ITFC/disable_ipv6
    echo 0 > /proc/sys/net/ipv6/conf/$ITFC/autoconf
    echo 0 > /proc/sys/net/ipv6/conf/$ITFC/accept_ra
    echo 0 > /proc/sys/net/ipv6/conf/$ITFC/accept_dad
    echo 0 > /proc/sys/net/ipv6/conf/$ITFC/dad_transmits
    echo 1 > /proc/sys/net/ipv6/conf/$ITFC/drop_unsolicited_na
    echo 1 > /proc/sys/net/ipv6/conf/$ITFC/addr_gen_mode

done

ip link set up dev $LO
ip link set up dev $LAN_0
ip link set up dev $LAN_1
ip link set up dev $LAN_W
ip link set up dev $LAN_X

for ITFC in $LAN_0 $LAN_1 $LAN_W ; do

    : ethtool --offload $ITFC rx on
    : ethtool --offload $ITFC tx on
    : ethtool --offload $ITFC tx-checksum-ip-generic on
    : ethtool --offload $ITFC tx-checksum-ipv4 on
    : ethtool --offload $ITFC tx-checksum-ipv6 on
    : ethtool --offload $ITFC rx-vlan-offload off
    : ethtool --offload $ITFC tx-vlan-offload off
    : ethtool --offload $ITFC generic-segmentation-offload off
    : ethtool --offload $ITFC generic-receive-offload off
    : ethtool --offload $ITFC tcp-segmentation-offload off
    : ethtool --offload $ITFC tx-tcp-segmentation off
    : ethtool --offload $ITFC tx-tcp6-segmentation off

    ethtool --pause $ITFC autoneg off
    ethtool --pause $ITFC rx off
    ethtool --pause $ITFC tx off

    : ethtool --coalesce $ITFC rx-usecs 2000
    : ethtool --coalesce $ITFC tx-usecs 2000

done

ip -4 addr add dev $LO $LO_4
ip -6 addr add dev $LO $LO_6

ip -4 addr add noprefixroute nodad dev $LAN_0 $LAN_4_IP/$LAN_4_NETMASK_0
ip -4 addr add noprefixroute nodad dev $LAN_W $LAN_4_IP/$LAN_4_NETMASK_W
ip -4 addr add noprefixroute nodad dev $LAN_X $LAN_4_IP/$LAN_4_NETMASK_X

ip -6 addr add noprefixroute nodad dev $LAN_0 $LAN_6_IP/$LAN_6_NETMASK_0
ip -6 addr add noprefixroute nodad dev $LAN_W $LAN_6_IP/$LAN_6_NETMASK_W
ip -6 addr add noprefixroute nodad dev $LAN_X $LAN_6_IP/$LAN_6_NETMASK_X

# SWITCH
ip -4 route add dev $LAN_0 mtu lock $LAN_MTU_0 advmss $((LAN_MTU_0-20-20)) src $LAN_4_IP $LAN_4_SWITCH
ip -4 route add dev $LAN_W mtu lock $LAN_MTU_W advmss $((LAN_MTU_W-20-20)) src $LAN_4_IP $LAN_4_NET_W
ip -4 route add dev $LAN_X mtu lock $LAN_MTU_X advmss $((LAN_MTU_X-20-20)) src $LAN_4_IP $LAN_4_NET_X

ip -6 route add dev $LAN_0 mtu lock $LAN_MTU_0 advmss $((LAN_MTU_0-20-20)) src $LAN_6_IP $LAN_6_SWITCH
ip -6 route add dev $LAN_W mtu lock $LAN_MTU_W advmss $((LAN_MTU_W-40-20)) src $LAN_6_IP $LAN_6_NET_W
ip -6 route add dev $LAN_X mtu lock $LAN_MTU_X advmss $((LAN_MTU_X-40-20)) src $LAN_6_IP $LAN_6_NET_X

# TODO: FIXME: MTU E MSS
ip -4 route add dev $LAN_X mtu 1420 advmss $((1420-20-20)) src $LAN_4_IP default
ip -6 route add dev $LAN_X mtu 1420 advmss $((1420-40-20)) src $LAN_6_IP default

# NAS INTERFACES HOOKADAS, SO DEIXAR PASSAR ARP???

# TODO: NOS PATHS, ENVIAR GRATUITOUS ARP BROADCAST 0xFFFFF
# TODO: NOS PATHS, ENVIAR GRATUITOUS ARP UNICAST 0xMACDESTINO

# TODO: WIFI

ip -4 route flush cache
ip -6 route flush cache

sleep 5

for TRY in 1 2 3 ; do
    if T=$(timeout 4 wget --tries=1 --timeout=2 --quiet -4 -O - http://pcdsh01.on.br/RelogioServidor.php) ; then
        if date -s @${T} ; then
            hwclock --systohc
            break
        fi
    fi
    sleep 5
done
